1.Crie um programa em C que cria uma thread, e faça com que o programa principal envie os valores 1, 2, 3, 4, 5, 6, 7, 8, 9 e 10 para a thread, com intervalos de 1 segundo entre cada envio. 
Depois de o programa principal enviar o número 10, ele aguarda 1 segundo e termina a execução.
A thread escreve na tela cada valor recebido, e quando ela receber o valor 10, ela termina a execução.

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
struct char_print_parms
{
	char character;
	int count;
};
void  *char_print (void* parameters)
	{
		struct char_print_parms *p = (struct char_print_parms*) parameters;
		int i;
		for (i = 0; i < 10; i++)
		{
			printf("%d\n", p -> count +i);
			sleep(1);
		}
			
		return NULL;
	}
int main ()
{
	pthread_t thread1_id;
	
	struct char_print_parms thread1_args;	
	thread1_args.character = '1';
	thread1_args.count = 1;

	pthread_create (&thread1_id, NULL, &char_print, &thread1_args);
	

	pthread_join (thread1_id, NULL);
	
	
return 0;
}

2.Crie um programa em C que preenche o vetor long int v[50000] completamente com valores aleatórios (use a função random()), e que procura o valor máximo do vetor por dois métodos:

(a) Pela busca completa no vetor v[];

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define TAM 50000

void valor_maximo(long int *vetor)
{
	long int i,aux = 0;

	for (i = 0; i < TAM; i++)
	{
		if (vetor[i] > aux)
		{
			aux = vetor[i];
		}
	}
	printf("%ld \n",aux );
}


int main(int argc, char const *argv[])
{
	long int *v = malloc(TAM*(sizeof(long int)));
	long int aux = 0;
	int i;

		

	for (int i = 0; i < TAM; i++)
	{
		v[i] = rand();
	}
	
	valor_maximo(v);
	
	return 0;
}	


(b) Separando o vetor em 4 partes, e usando 4 threads para cada uma encontrar o máximo de cada parte. Ao final das threads, o programa principal compara o resultado das quatro threads para definir o máximo do vetor.
Ao final do programa principal, compare os resultados obtidos pelos dois métodos.

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define TAM 50000


void* valor_maximo(void *vetor)
{
	long int *v = (long int*) vetor;
	long int i,aux = 0;

	for (i = 0; i < TAM; i++)
	{
		if (v[i] > aux)
		{
			aux = v[i];
		}
	}
	return (void*) aux;
}

int main(int argc, char const *argv[])
{
	long int v[TAM];

	long int A[TAM/4];
	long int B[TAM/4];
	long int C[TAM/4];
	long int D[TAM/4];

	long int i,aux = 0;
	void *status1;
	void *status2;
	void *status3;
	void *status4;

	pthread_t thread1_id;
	pthread_t thread2_id;
	pthread_t thread3_id;
	pthread_t thread4_id;	


	for (i = 0; i < TAM; i++)
	{
		v[i] = rand();
	}

	for (i = 0; i < (TAM/4) - 1; i++)
	{
		A[i] = v[i];
	}
	
	for (i = (TAM/4); i < (TAM/2) - 1; i++)
	{
		B[i] = v[i];
	}

	for (i = (TAM/2); i < ((3*TAM)/4) - 1; i++)
	{
		C[i] = v[i];
	}

	for (i = ((3*TAM)/4); i < (TAM); i++)
	{
		D[i] = v[i];
	}
	pthread_create (&thread1_id, NULL, &valor_maximo, &A);
	pthread_create (&thread2_id, NULL, &valor_maximo, &B);
	pthread_create (&thread3_id, NULL, &valor_maximo, &C);
	pthread_create (&thread4_id, NULL, &valor_maximo, &D);

	//valor_maximo(v);
	pthread_join (thread1_id, &status1);
	pthread_join (thread2_id, &status2);
	pthread_join (thread3_id, &status3);
	pthread_join (thread4_id, &status4);

	
		if ((long int) status1 > aux)
		{
			aux = (long int)status1;
		}

		if ((long int) status2 > aux)
		{
			aux = (long int)status2;
		}

		if ((long int) status3 > aux)
		{
			aux = (long int)status3;
		}

		if ((long int) status4 > aux)
		{
			aux = (long int)status4;
		}	

	printf("%ld\n",aux);


	return 0;
}	

3.Repita o exercício anterior, mas calcule a média do vetor ao invés do valor máximo.

4.Repita o exercício anterior, mas calcule a variância do vetor ao invés da média.